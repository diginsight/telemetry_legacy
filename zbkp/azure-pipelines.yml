# .NET Desktop
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net
 
trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - Common.Diagnostics/Properties
    - Common.Diagnostics.v2/Properties
    - Common.Diagnostics.Core/Properties
    - Common.Diagnostics.Full/Properties
    - Common.Diagnostics.Win/Properties
    - Common.Diagnostics.AppInsights/Properties
    - Common.Diagnostics.Log4net/Properties
    - Common.Diagnostics.Serilog/Properties
    - Samples
    - docs/*
    - docs/README.md

pool:
  name: 'selfhosted'

# pool:
#   vmImage: windows-latest

name: $(date:yyyy).$(date:MM).$(date:dd)$(rev:.r)

variables: 
  solutionsFilter: '*.sln'
  projectsFilter: '*.csproj'
  projectBaseName: Common.Diagnostics
  solution: ./$(projectBaseName).sln
  allSolutions: './$(projectBaseName).sln' 
  packageFolder: $(projectBaseName).Package
  commonDiagnosticBaseName: $(projectBaseName)
  commonDiagnosticv2BaseName: $(projectBaseName).v2
  commonDiagnosticCoreBaseName: $(projectBaseName).Core
  commonDiagnosticFullBaseName: $(projectBaseName).Full
  commonDiagnosticWinBaseName: $(projectBaseName).Win
  commonDiagnosticSerilogBaseName: $(projectBaseName).Serilog
  commonDiagnosticLog4netBaseName: $(projectBaseName).Log4net
  commonDiagnosticAppinsightsBaseName: $(projectBaseName).Appinsights
  commonDiagnosticLogstringsAzureBaseName: $(projectBaseName).Logstrings.Azure
  commonDiagnosticLogstringsIdentityBaseName: $(projectBaseName).Logstrings.Identity
  commonDiagnosticLogstringsWpfBaseName: $(projectBaseName).Logstrings.Wpf
  
  commonDiagnosticProj: ./$(commonDiagnosticBaseName)/$(commonDiagnosticBaseName).csproj
  commonDiagnosticv2Proj: ./$(commonDiagnosticv2BaseName)/$(commonDiagnosticv2BaseName).csproj
  commonDiagnosticCoreProj: ./$(commonDiagnosticCoreBaseName)/$(commonDiagnosticCoreBaseName).csproj
  commonDiagnosticFullProj: ./$(commonDiagnosticFullBaseName)/$(commonDiagnosticFullBaseName).csproj
  commonDiagnosticWinProj: ./$(commonDiagnosticWinBaseName)/$(commonDiagnosticWinBaseName).csproj
  commonDiagnosticSerilogProj: ./$(commonDiagnosticSerilogBaseName)/$(commonDiagnosticSerilogBaseName).csproj
  commonDiagnosticLog4netProj: ./$(commonDiagnosticLog4netBaseName)/$(commonDiagnosticLog4netBaseName).csproj
  commonDiagnosticAppinsightsProj: ./$(commonDiagnosticAppinsightsBaseName)/$(commonDiagnosticAppinsightsBaseName).csproj
  
  commonDiagnosticLogstringsAzureProj: ./$(commonDiagnosticLogstringsAzureBaseName)/$(commonDiagnosticLogstringsAzureBaseName).csproj
  commonDiagnosticLogstringsIdentityProj: ./$(commonDiagnosticLogstringsIdentityBaseName)/$(commonDiagnosticLogstringsIdentityBaseName).csproj
  commonDiagnosticLogstringsWpfProj: ./$(commonDiagnosticLogstringsWpfBaseName)/$(commonDiagnosticLogstringsWpfBaseName).csproj
  
  allProjects: '**/@($(commonDiagnosticProj)|$(commonDiagnosticCoreProj)|$(commonDiagnosticFullProj)|$(commonDiagnosticWinProj)|$(commonDiagnosticSerilogProj)|$(commonDiagnosticLog4netProj)|$(commonDiagnosticAppinsightsProj)|$(commonDiagnosticLogstringsAzureProj)|$(commonDiagnosticLogstringsIdentityProj)|$(commonDiagnosticLogstringsWpfProj) )' 
  buildBaseNames: '$(commonDiagnosticBaseName)|$(commonDiagnosticCoreBaseName)|$(commonDiagnosticFullBaseName)|$(commonDiagnosticWinBaseName)|$(commonDiagnosticSerilogBaseName)|$(commonDiagnosticLog4netBaseName)|$(commonDiagnosticAppinsightsBaseName)|$(commonDiagnosticLogstringsAzureBaseName)|$(commonDiagnosticLogstringsIdentityBaseName)|$(commonDiagnosticLogstringsWpfBaseName)' 
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release' #Debug,
  publishBaseNames: '$(commonDiagnosticBaseName)|$(commonDiagnosticWinBaseName)|$(commonDiagnosticSerilogBaseName)|$(commonDiagnosticLog4netBaseName)|$(commonDiagnosticAppinsightsBaseName) |$(commonDiagnosticLogstringsAzureBaseName)|$(commonDiagnosticLogstringsIdentityBaseName)|$(commonDiagnosticLogstringsWpfBaseName)' 
  buildProjectFiles: '$(commonDiagnosticBaseName).csproj|$(commonDiagnosticCoreBaseName).csproj|$(commonDiagnosticFullBaseName).csproj|$(commonDiagnosticWinBaseName).csproj|$(commonDiagnosticSerilogBaseName).csproj|$(commonDiagnosticLog4netBaseName).csproj|$(commonDiagnosticAppinsightsBaseName).csproj |$(commonDiagnosticLogstringsAzureBaseName).csproj|$(commonDiagnosticLogstringsIdentityBaseName).csproj|$(commonDiagnosticLogstringsWpfBaseName).csproj' 
  publishNupkgFilter: |
    **\bin\$(buildConfiguration)\**\*.$(computedValues.version).nupkg
    !**\bin\$(buildConfiguration)\**\Common.Diagnostics.Core.$(computedValues.version).nupkg
    !**\bin\$(buildConfiguration)\**\Common.Diagnostics.Full.$(computedValues.version).nupkg

  stageVariables: 'version'

stages:
- stage: Build_Assemblies
  # variables:
  #     agent.preferPowerShellOnContainers: true
  jobs:
  - job: Increment_Version
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    # variables:
    #     agent.preferPowerShellOnContainers: true
    workspace: 
      clean: outputs
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
      name: checkout
      displayName: Checkout Self

    - task: PowerShell@2
      inputs:
        filePath: '.\scripts\v1\00. DumpVariables.ps1'
      name: psDumpVariables
      displayName: DumpVariables
      enabled: true

    - task: PowerShell@2
      inputs:
        filePath: '.\scripts\v1\01. GetAssemblyVersion.ps1'
        arguments: '-projectFile ''$(commonDiagnosticProj)'' ' 
      name: psGetAssemblyVersion
      displayName: GetAssemblyVersion
      enabled: true
      continueOnError: true

    - powershell: |
        $versionSuffix = "$(buildConfiguration)" 
        $versionSuffix = $versionSuffix -replace "Debug", ".D"  
        $versionSuffix = $versionSuffix -replace "Release", ".R"  
        echo "versionSuffix: '$versionSuffix'"
        echo "##vso[task.setvariable variable=versionSuffix;isOutput=true]$versionSuffix"

        $version = [version]"$(psGetAssemblyVersion.version)"
        $newVersion = "{0}.{1}.{2}.{3}" -f $version.Major, $version.Minor, $version.Build, ($version.Revision + 1)
        Write-Host "version: '$version', newVersion: '$newVersion'"
        echo "##vso[task.setvariable variable=version;isOutput=true]$newVersion"
      name: computedValues 
      displayName: Compute runtime values

    - powershell: |
        echo "computedValues.versionSuffix: '$(computedValues.versionSuffix)'"
        echo "computedValues.version: '$(computedValues.version)'"
        ".\scripts\v1\00. DumpVariables.ps1"
      name: computedValuesPrint 
      displayName: Dump computed values

    - task: PowerShell@2
      inputs:
        filePath: '.\scripts\v1\01.1 SetAssemblyVersion.ps1'
        arguments: '-projectsFiles ''$(buildProjectFiles)'' -filterPattern '''' -version ''$(computedValues.version)'' ' 
      name: psSetAssemblyVersion
      displayName: SetAssemblyVersion
      enabled: true
      continueOnError: true

    - powershell: |
        echo "version: '$(version)'"
        echo "computedValues.version '$(computedValues.version)'"
      name: readVersion1
      displayName: Read Versions
      continueOnError: true
    - task: PowerShell@2
      inputs:
        filePath: '.\scripts\v1\01.9 CommitChanges.ps1'
      name: psCommitChanges
      displayName: CommitChanges
      enabled: true

    # - bash: |
    #     curl -fL -XPUT -H "Authorization:Bearer $(System.AccessToken)" -H "Content-Type:application/json" \
    #     -d '{
    #       "id": "$(versionGroupId)",
    #       "type": "Vsts",
    #       "name": "versionGroup",
    #       "variables": {
    #         "versionGroupId": {
    #           "isSecret": false,
    #           "value": "$(versionGroupId)"
    #         },
    #         "version": {
    #           "isSecret": false,
    #           "value": "$(computedValues.version)"
    #         }
    #       }
    #     }' \
    #     $(System.TeamFoundationCollectionUri)/$(System.TeamProject)/_apis/distributedtask/variablegroups/$(versionGroupId)?api-version=7.0
    #   displayName: 'Set variable in variable group to current $(computedValues.version)'

  - job: Build_Assemblies
    dependsOn: Increment_Version
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5
    strategy:
      maxParallel: 2
      matrix: 
        Debug: 
          buildConfiguration: 'Debug'
        Release:
          buildConfiguration: 'Release'
    workspace: 
      clean: outputs
    variables:
    - name: targetVersion
      value: $[dependencies.Increment_Version.outputs['computedValues.version']]
      readonly: true

    steps:
    - powershell: |
        $versionSuffix = "$(buildConfiguration)" 
        $versionSuffix = $versionSuffix -replace "Debug", ".D"  
        $versionSuffix = $versionSuffix -replace "Release", ".R"  
        echo "versionSuffix: '$versionSuffix'"
        echo "##vso[task.setvariable variable=versionSuffix;isOutput=true]$versionSuffix"
        Write-Host "version: '$version', targetVersion: '$(targetVersion)'"
        echo "##vso[task.setvariable variable=version;isOutput=true]$(targetVersion)"
      name: computedValues
      displayName: Compute runtime values

    - powershell: |
        echo "computedValues.version: '$(computedValues.version)'"
        echo "computedValues.versionSuffix: '$(computedValues.versionSuffix)'"
        ".\scripts\v1\00. DumpVariables.ps1"
      name: computedValuesPrint 
      displayName: Dump computed values

    - task: PowerShell@2
      inputs:
        filePath: '.\scripts\v1\01.1 SetAssemblyVersion.ps1'
        arguments: '-projectsFiles ''$(buildProjectFiles)'' -filterPattern '''' -version ''$(computedValues.version)'' ' 
      name: psSetAssemblyVersion
      displayName: SetAssemblyVersion
      enabled: true
      continueOnError: true
    - task: PowerShell@2
      displayName: Set VERSION environment variable
      inputs:
        targetType: inline
        script: |
          $version = "$(computedValues.version)" # Set the version value here
          Write-Host "##vso[task.setvariable variable=VERSION]$version"

    - task: PowerShell@2
      inputs:
        filePath: '.\scripts\v1\00. DumpVariables.ps1'
      name: psDumpVariables0
      displayName: DumpVariables
      enabled: true

    - task: NuGetToolInstaller@1
      displayName: Install NuGet tool
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '$(allSolutions)'
        feedsToUse: 'config'
        nugetConfigPath: '.\scripts\Config\NuGet.Config'
        includeNuGetOrg: true
        noCache: false
        disableParallelProcessing: false
        verbosityRestore: Detailed
        packTimezone: utc
        includeSymbols: false
      displayName: Nuget Restore
      enabled: true

    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(allSolutions)'
      displayName: Dotnet Restore
      enabled: true

    - task: VSBuild@1
      displayName: Build solution $(allSolutions) (configuration $(buildConfiguration))
      inputs:
        solution: $(allSolutions)
        platform: $(buildPlatform)
        configuration: $(buildConfiguration)
        vsVersion: latest
        clean: false
        maximumCpuCount: true
        restoreNugetPackages: false
        logProjectEvents: true
        createLogFile: true
        logFileVerbosity: normal

    - task: CopyFiles@2
      displayName: Copy '*.nupkg' to '$(Build.ArtifactStagingDirectory)\Packages\$(buildConfiguration)'
      inputs:
        SourceFolder: .
        contents: '$(publishNupkgFilter)'
        targetFolder: $(Build.ArtifactStagingDirectory)\Packages\$(buildConfiguration)
        CleanTargetFolder: false
        OverWrite: true
        flattenFolders: true
        preserveTimestamp: false

    - task: CopyFiles@2
      displayName: Copy 'bin' to '$(Build.BinariesDirectory)\Binaries\$(buildConfiguration)'
      inputs:
        SourceFolder: .
        contents: '**\bin\$(buildConfiguration)\**'
        targetFolder: $(Build.BinariesDirectory)\Binaries\$(buildConfiguration)
        CleanTargetFolder: false

    - task: PublishPipelineArtifact@0
      displayName: PublishPipelineArtifact from '$(Build.ArtifactStagingDirectory)\Packages\$(buildConfiguration)'
      inputs:
        artifactName: 'packages/$(buildConfiguration)'
        targetPath: '$(Build.ArtifactStagingDirectory)\Packages\$(buildConfiguration)'

    - task: PublishPipelineArtifact@0
      displayName: PublishPipelineArtifact from '$(Build.BinariesDirectory)\Binaries\$(buildConfiguration)'
      inputs:
        artifactName: 'binaries/$(buildConfiguration)'
        targetPath: '$(Build.BinariesDirectory)\Binaries\$(buildConfiguration)'

- stage: Deploy_Assemblies
  dependsOn: Build_Assemblies
  variables:
  - name: targetVersion
    value: $[stageDependencies.Build_Assemblies.Increment_Version.outputs['computedValues.version']]
    readonly: true
  jobs:
  - job: start
    steps:
    - script: echo start job Build_Assemblies

  - deployment: Deploy_2_NugetFeed
    displayName: Deploy 2 nuget feed 
    dependsOn: start
    environment: 'feed'
    variables: 
      artifactsFeed: 'd236cfda-9f52-42db-b262-986de2b2b226/180128b8-3bd6-472c-bda0-fbc5e32b6aa6'
      packagesFolder: packages
      rootDir: '\_releases\97. Diginsight'
    strategy:
      runOnce:
        # preDeploy:
        #   steps:
        #     - script: echo preDeploy job   
        deploy:
          steps:
          - checkout: self
            persistCredentials: true
            name: checkout
            displayName: Checkout Self

          - powershell: |
              $versionSuffix = "$(buildConfiguration)" 
              $versionSuffix = $versionSuffix -replace "Debug", ".D"  
              $versionSuffix = $versionSuffix -replace "Release", ".R"  
              echo "versionSuffix: '$versionSuffix'"
              echo "##vso[task.setvariable variable=versionSuffix;isOutput=true]$versionSuffix"
              Write-Host "version: '$version', targetVersion: '$(targetVersion)'"
              echo "##vso[task.setvariable variable=version;isOutput=true]$(targetVersion)"
            name: computedValues
            displayName: Compute runtime values

          - powershell: |
              echo "computedValues.version: '$(computedValues.version)'"
              echo "computedValues.versionSuffix: '$(computedValues.versionSuffix)'"
              ".\scripts\v1\00. DumpVariables.ps1"
            name: computedValuesPrint 
            displayName: Dump computed values

          - task: NuGetCommand@2
            displayName: Nuget push from 'packages' folder to 'Common.Diagnostics' feed
            inputs:
              command: 'push'
              packagesToPush: '..\packages\$(buildConfiguration)\*.$(computedValues.version).nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: $(artifactsFeed)
              allowPackageConflicts: true
          
          - task: NuGetCommand@2
            inputs:
              command: 'push'
              packagesToPush: '..\packages\$(buildConfiguration)\*.$(computedValues.version).nupkg'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'diginsight telemetry'

        # routeTraffic:
        #   steps:
        #     - script: echo routeTraffic
        # postRouteTraffic:
        #   steps:
        #     - script: echo postRouteTraffic

  - deployment: Deploy_2_AzureFolder
    displayName: Deploy 2 azure folder 
    dependsOn: start
    environment: 'storage'
    variables: 
      azureShare: azureshare
      packagesFolder: packages
      rootDir: '\_releases\97. Diginsight'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            persistCredentials: true
            name: checkout
            displayName: Checkout Self

          - powershell: |
              $versionSuffix = "$(buildConfiguration)" 
              $versionSuffix = $versionSuffix -replace "Debug", ".D"  
              $versionSuffix = $versionSuffix -replace "Release", ".R"  
              echo "versionSuffix: '$versionSuffix'"
              echo "##vso[task.setvariable variable=versionSuffix;isOutput=true]$versionSuffix"
              Write-Host "version: '$version', targetVersion: '$(targetVersion)'"
              echo "##vso[task.setvariable variable=version;isOutput=true]$(targetVersion)"
            name: computedValues
            displayName: Compute runtime values

          - powershell: |
              echo "computedValues.version: '$(computedValues.version)'"
              echo "computedValues.versionSuffix: '$(computedValues.versionSuffix)'"
              ".\scripts\v1\00. DumpVariables.ps1"
            name: computedValuesPrint 
            displayName: Dump computed values

          - task: AzureKeyVault@1
            inputs:
              azureSubscription: 'MCAPS-Hybrid-darioa'
              KeyVaultName: 'dev-dgw-001-kv'
              SecretsFilter: '*'
            displayName: Get KeyVault Secrets  ('dev-dgw-001-kv')
            enabled: true

          - task: PowerShell@2
            inputs:
              filePath: '.\scripts\v1\00. DumpVariables.ps1'
            name: psDumpVariables2
            displayName: DumpVariables
            enabled: true

          - task: AzurePowerShell@5
            inputs:
              ScriptType: 'FilePath'
              ScriptPath: '.\scripts\v1\06. Copy2AzureStorage.ps1'
              ScriptArguments: '-connectionString ''$(ConnectionStringDevdgwsamplesstorage)'' -sourceFolder $(packagesFolder) -azureShare ''$(azureShare)'' -rootDir ''$(rootDir)'' -version ''$(computedValues.version)'''
              azureSubscription: 'MCAPS-Hybrid-darioa'
              azurePowerShellVersion: 'LatestVersion'
            name: psCopy2AzureStorageDebug
            env:
              connectionString: $(connectionString)
            displayName: Copy2AzureStorage
            enabled: true

            # - task: PowerShell@2
            #   inputs:
            #     filePath: '.\scripts\06. Copy2AzureStorage.ps1'
            #     arguments: "-connectionString '$(connectionString)' -sourceFolder $(packagesFolder)\$(buildConfiguration) -azureShare '$(azureShare)' -rootDir '$(rootDir)' -version '$(computedValues.version)'"
            #   name: psCopy2AzureStorage
            #   env:
            #     connectionString: $(connectionString)
            #   displayName: Copy2AzureStorage
            #   enabled: true

- stage: Test_Assemblies
  dependsOn: Deploy_Assemblies
  jobs:
  # - job: approval
  - deployment: Tests
    pool:
      name: 'selfhosted'
      # demands: db
    displayName: Tests 
    # dependsOn: 
    # - Deploy_2_AzureFolder
    # - Deploy_2_NugetFeed
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            persistCredentials: true
            name: checkout
            displayName: Checkout Self

          - task: VisualStudioTestPlatformInstaller@1 
            inputs:
              packageFeedSelector: 'nugetOrg'
              versionSelector: 'latestPreRelease'

          - task: VSTest@2
            displayName: test solution
            inputs:
              platform: '$(buildPlatform)'
              configuration: '$(buildConfiguration)'
              searchFolder: Tests
              runInParallel: false
              diagnosticsEnabled: true
              codeCoverageEnabled: false
              
              

